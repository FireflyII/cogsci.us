HairEyeColor
a=HairEyeColor
a
summary(a)
dput(a,"hec")
hec <- read.csv("~/hec", header=FALSE)
View(hec)
getwd()
PHIL102Quiz1 <- read.csv("/Volumes/TarDisk-128/PHIL102Quiz1.csv", header=FALSE)
View(PHIL102Quiz1)
View(PHIL102Quiz1)
View(PHIL102Quiz1)
View(PHIL102Quiz1)
View(PHIL102Quiz1)
hist(PHIL102Quiz1)
hist(PHIL102Quiz1$V3)
hist(PHIL102Quiz1$V3[2:54])
hist(PHIL102Quiz1$V3(2:54)
z
hist(PHIL102Quiz1$V3(2:54))
hist(PHIL102Quiz1$V3[2,54])
hist(PHIL102Quiz1$V3[,2,54])
hist(PHIL102Quiz1$V3[2,54])
hist(PHIL102Quiz1$V3[2:54])
PHIL102Quiz1$V6[2]
lines = read.table('/Volumes/TarDisk-128/logdata/CPoPrG_test31501125839511.txt',sep='\n',stringsAsFactors=F,quote=NULL)
View(lines)
a=fromJSON(lines[1,]) # first line out of the data
library(rjson)
library(rjson)
lines = read.table('/Volumes/TarDisk-128/logdata/CPoPrG_test31501125839511.txt',sep='\n',stringsAsFactors=F,quote=NULL)
View(lines)
View(lines)
a=fromJSON(lines[1,]) # first line out of the data
data.keys = unlist(lapply(a,function(x) {
return(x['keys'])
}))
if ("rjson" %in% inst_packages[, 1]) update.packages("rjson")
update.packages("rjson")
library(rjson)
install.packages("rjson")
library(rjson)
lines = read.table('/Volumes/TarDisk-128/logdata/CPoPrG_test31501125839511.txt',sep='\n',stringsAsFactors=F,quote=NULL)
a=fromJSON(lines[1,]) # first line out of the data
data.keys = unlist(lapply(a,function(x) {
return(x['keys'])
}))
# make sure to get the first and last keys
data.keys = as.vector(c('XXX',data.keys,'XXX'))
# index at which keys change;assumes approx 17ms sample rate
key_change_indices = which(data.keys[2:length(data.keys)]!=data.keys[1:(length(data.keys)-1)])
the_keys = data.keys[key_change_indices[1:(length(key_change_indices)-1)]+1] # withhold placeholder XXX
all_dwell_times = 17*diff(key_change_indices)
key_dwell_times = all_dwell_times[the_keys!='']
number_of_keys = length(key_dwell_times)
mean_key_dwells = mean(key_dwell_times)
plotagain <- read.csv("/Volumes/TarDisk-128/phaser/SpaceH/pilotlogs/plotagain.csv")
View(plotagain)
View(plotagain)
View(plotagain)
install_github('andreacirilloac/updateR')
library(devtools)
install_github('andreacirilloac/updateR')
results <- rep(0,1000000)
results[1:10]
head(results)
for (i in 1:1000000){}
for (i in 1:1000000){
x <- rnorm(5,500,10)
mn <- mean(x)
results(i) <- sum((x-mn)^2)/4
}
for (i in 1:1000000){
x <- rnorm(5,500,10)
mn <- mean(x)
results[i] <- sum((x-mn)^2)/4
}
hist(results)
mean(results)
# GET DATA
setwd("/Volumes/Garfield/")
game_data <- read.csv("DataSpikes_percents.csv")
require("ggplot2")
require("dplyr")
require("plyr")
# Summarize data for use in plotting
data_summary <- function(data, varname, groupnames){
# Returns the mean and std. error of a column
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
se = sd(x[[col]]/sqrt(length(x)), na.rm=TRUE))
}
# Make a table of means and stderrs relative to ind. values
data_sum <-ddply(data, groupnames, .fun=summary_func,
varname)
print(data_sum)
return(data_sum)
}
# Make the plot
make_plot <- function(df, iv, dv) {
# Creat a supplementary table with means and standard errors
df2 <- data_summary(df, varname=dv, groupnames= c(iv))
the_mean <- df2[["mean"]]
print(the_mean)
se <- df2[["se"]]
# Plot with error bars
ggplot(df2,
aes_string(x = iv, y = the_mean)) +
ylab(dv) +
geom_bar(stat="identity",color="black", fill="#FF9999") +
geom_point(data=df, aes_string(x=iv,y=dv),position = position_jitter(w = 0.15, h = 0), alpha=.2) +
geom_errorbar(
aes(ymin = the_mean - 1.96*se, ymax = the_mean + 1.96*se),
width = .2)
}
make_plot(game_data, "Clear_Progress", "percent_on_buttons")
# Not sure this is useful, but FWIW...
make_plot(game_data, "confident", "Clear_Progress")
make_plot(game_data, "taxing", "X10x10_std_time_spent")
make_plot(game_data, "taxing", "average_per_visited")
make_plot(game_data, "confident", "Buttons_Pushed")
make_plot(game_data, "taxing", "average_per_visited")
make_plot(game_data, "confident", "Buttons_Pushed")
make_plot(game_data, "frustrated","Spikes2")
make_plot(game_data, "Spikes2","frustrated")
setwd("/Volumes/Garfield/cogsci.us/")
# GET DATA
game_data <- read.csv("AprilSpikes_percents2.csv")
fit <- aov(Time_Spent ~  + Clear_Progress + Clear_Completion,data = game_data) # * on Clear_Completion
summary(fit)
fit <- aov(Buttons_Pushed ~  + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(Steps_to_Completion ~  + Clear_Progress + Clear_Completion,data = game_data) # * on Clear_Completion
summary(fit)
fit <- aov(Distance_Traveled ~  + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(Average_Distance_Per_Step ~  + Clear_Progress + Clear_Completion,data = game_data) # . on Clear_Completion
summary(fit)
fit <- aov(Number_of_Paths ~  + Clear_Progress + Clear_Completion,data = game_data) # * on Clear_Completion
summary(fit)
fit <- aov(Average_Path_Length ~  + Clear_Progress + Clear_Completion,data = game_data) # . on Clear_Completion
summary(fit)
fit <- aov(Standard_Deviation_of_Path_Length ~  + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(percent_on_buttons ~  + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(average_button_visits ~  + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(percent_visited ~  + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(backtrack_std ~  + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(average_visit ~  + Clear_Progress + Clear_Completion,data = game_data) # * on Clear_Completion
summary(fit)
fit <- aov(average_per_visited ~  + Clear_Progress + Clear_Completion,data = game_data) # ** on Clear_Completion
summary(fit)
fit <- aov(backtrack_ratio ~  + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
# LINEAR MODELS ON IVS
fit <- lm(Time_Spent ~ Clear_Progress + Clear_Completion,data = gd) # * on Clear_Completion
# LINEAR MODELS ON IVS
fit <- lm(Time_Spent ~ Clear_Progress + Clear_Completion,data = game_data) # * on Clear_Completion
summary(fit)
fit <- lm(Buttons_Pushed ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Steps_to_Completion ~ Clear_Progress + Clear_Completion,data = gd) # * on Clear_Completion
summary(fit)
fit <- lm(Steps_to_Completion ~ Clear_Progress + Clear_Completion,data = game_data) # * on Clear_Completion
summary(fit)
fit <- lm(Distance_Traveled ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Average_Distance_Per_Step ~ Clear_Progress + Clear_Completion,data = game_data) # . on Clear_Completion
summary(fit)
fit <- lm(Number_of_Paths ~ Clear_Progress + Clear_Completion,data = gd) # * on Clear_Completion
fit <- lm(Number_of_Paths ~ Clear_Progress + Clear_Completion,data = game_data) # * on Clear_Completion
summary(fit)
fit <- lm(Average_Path_Length ~ Clear_Progress + Clear_Completion,data = game_data) # . on Clear_Completion
summary(fit)
fit <- lm(Standard_Deviation_of_Path_Length ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(percent_on_buttons ~ Clear_Progress * Clear_Completion,data = game_data) # *** on Clear_Progress
summary(fit)
fit <- lm(percent_on_buttons ~ Clear_Progress + Clear_Completion,data = game_data) # *** on Clear_Progress
summary(fit)
fit <- lm(average_button_visits ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(percent_visited ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(backtrack_std ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(average_visit ~ Clear_Progress + Clear_Completion,data = game_data) # * on Clear_Completion
summary(fit)
fit <- lm(average_per_visited ~ Clear_Progress + Clear_Completion,data = game_data) # ** on Clear_Completion
summary(fit)
fit <- lm(backtrack_ratio ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
# LINEAR MODELS WITH INTERACTIONS
fit <- lm(Time_Spent ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Buttons_Pushed ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Steps_to_Completion ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Distance_Traveled ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Average_Distance_Per_Step ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Number_of_Paths ~ Clear_Progress * Clear_Completion,data = game_data) # . on Clear_Completion
summary(fit)
fit <- lm(Average_Path_Length ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Standard_Deviation_of_Path_Length ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(percent_on_buttons ~ Clear_Progress * Clear_Completion,data = game_data) # *** on Clear_Progress, . on Clear_Completion
summary(fit)
fit <- lm(average_button_visits ~ Clear_Progress * Clear_Completion,data = game_data) # . on Clear_Progress
summary(fit)
fit <- lm(percent_visited ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(backtrack_std ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(average_visit ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(average_per_visited ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(backtrack_ratio ~ Clear_Progress * Clear_Completion,data = game_data) # . on Clear_Progress
summary(fit)
# CONVENIENCE FUNCTION FOR T-TESTS / PLOTS
my_ttest <- function(dv,iv) {
result <- t.test(dv ~ iv)
print(result)
plot(iv, dv)
}
# T TESTS AND PLOTS ON EACH DV / IV PAIR
my_ttest(game_data$Time_Spent, game_data$Clear_Progress)
my_ttest(game_data$Time_Spent, game_data$Clear_Completion) # p = 0.01765
my_ttest(game_data$Buttons_Pushed, game_data$Clear_Progress)
my_ttest(game_data$Buttons_Pushed, game_data$Clear_Completion)
my_ttest(game_data$Steps_to_Completion, game_data$Clear_Progress)
my_ttest(game_data$Steps_to_Completion, game_data$Clear_Completion) # p = 0.04587
my_ttest(game_data$Distance_Traveled, game_data$Clear_Progress)
my_ttest(game_data$Distance_Traveled, game_data$Clear_Completion)
my_ttest(game_data$Average_Distance_Per_Step, game_data$Clear_Progress)
my_ttest(game_data$Average_Distance_Per_Step, game_data$Clear_Completion)
my_ttest(game_data$Number_of_Paths, game_data$Clear_Progress)
my_ttest(game_data$Number_of_Paths, game_data$Clear_Completion) # p = 0.01709
my_ttest(game_data$Average_Path_Length, game_data$Clear_Progress)
my_ttest(game_data$Average_Path_Length, game_data$Clear_Completion)
my_ttest(game_data$Standard_Deviation_of_Path_Length, game_data$Clear_Progress)
my_ttest(game_data$Standard_Deviation_of_Path_Length, game_data$Clear_Completion)
my_ttest(game_data$percent_on_buttons, game_data$Clear_Progress) # p = 3.194e-11
my_ttest(game_data$percent_on_buttons, game_data$Clear_Completion)
my_ttest(game_data$average_button_visits, game_data$Clear_Progress)
my_ttest(game_data$average_button_visits, game_data$Clear_Completion)
my_ttest(game_data$percent_visited, game_data$Clear_Progress)
my_ttest(game_data$percent_visited, game_data$Clear_Completion)
my_ttest(game_data$backtrack_std, game_data$Clear_Progress)
my_ttest(game_data$backtrack_std, game_data$Clear_Completion)
my_ttest(game_data$average_visit, game_data$Clear_Progress)
my_ttest(game_data$average_visit, game_data$Clear_Completion) # p = 0.04587
my_ttest(game_data$average_per_visited, game_data$Clear_Progress)
my_ttest(game_data$average_per_visited, game_data$Clear_Completion) # p = 0.007427
my_ttest(game_data$backtrack_ratio, game_data$Clear_Progress)
my_ttest(game_data$backtrack_ratio, game_data$Clear_Completion)
#Survey Info(?)
my_lm <- function(dv) {
print("----- Clear Progress-----")
fit <- lm(dv~game_data$Clear_Progress)
print(summary(fit))
print("----- Clear Completion-----")
fit <- lm(dv~game_data$Clear_Completion)
print(summary(fit))
}
my_lm(as.numeric(game_data$wander))
my_lm(as.numeric(game_data$frustrated)) # . in Clear_Progress
my_lm(as.numeric(game_data$rewarding)) # . in both
my_lm(as.numeric(game_data$confident)) # ** in clear progress
my_lm(as.numeric(game_data$suprised))
my_lm(as.numeric(game_data$smooth))
my_lm(as.numeric(game_data$practice))
my_lm(as.numeric(game_data$taxing))  # . in both
my_lm(as.numeric(game_data$worthwhile)) # . in progress
my_lm(as.numeric(game_data$fun))
my_lm_2 <- function(dv) {
print("----- Time_Spent-----")
fit <- lm(dv~game_data$Time_Spent)
print(summary(fit))
print("----- Buttons_Pushed-----")
fit <- lm(dv~game_data$Buttons_Pushed)
print(summary(fit))
print("----- Steps_to_Completion-----")
fit <- lm(dv~game_data$Steps_to_Completion)
print(summary(fit))
print("----- Distance_Traveled-----")
fit <- lm(dv~game_data$Distance_Traveled)
print(summary(fit))
print("----- Average_Distance_Per_Step-----")
fit <- lm(dv~game_data$Average_Distance_Per_Step)
print(summary(fit))
print("----- Number_of_Paths-----")
fit <- lm(dv~game_data$Number_of_Paths)
print(summary(fit))
print("----- Average_Path_Length-----")
fit <- lm(dv~game_data$Average_Path_Length)
print(summary(fit))
print("----- Standard_Deviation_of_Path_Length-----")
fit <- lm(dv~game_data$Standard_Deviation_of_Path_Length)
print(summary(fit))
print("----- Percent_on_buttons-----")
fit <- lm(dv~game_data$percent_on_buttons)
print(summary(fit))
print("----- Average_button_visits-----")
fit <- lm(dv~game_data$average_button_visits)
print(summary(fit))
print("----- percent_visited-----")
fit <- lm(dv~game_data$percent_visited)
print(summary(fit))
print("----- Backtrack_Standard_Deviation-----")
fit <- lm(dv~game_data$backtrack_std)
print(summary(fit))
print("----- Average_visit-----")
fit <- lm(dv~game_data$average_visit)
print(summary(fit))
print("----- Average_per_visited-----")
fit <- lm(dv~game_data$average_per_visited)
print(summary(fit))
print("----- Backtrack_Ratio-----")
fit <- lm(dv~game_data$backtrack_ratio)
print(summary(fit))
}
my_lm_2(as.numeric(game_data$wander))         # . in steps to completion
my_lm_2(as.numeric(game_data$frustrated))     # . in time spent
my_lm_2(as.numeric(game_data$rewarding))      # . in average path length
my_lm_2(as.numeric(game_data$confident))      # ** in buttons pushed
# * in distance traveled
# * in average distance per step
# . in average path length
# * in standard deviation of path length
# * in average button visits
# ** in percent visited
my_lm_2(as.numeric(game_data$suprised))
my_lm_2(as.numeric(game_data$smooth))         # . in percent on buttons
my_lm_2(as.numeric(game_data$practice))       # . in buttons pushed
my_lm_2(as.numeric(game_data$taxing))         # ** in time spent
# ** in buttons pushed
# . in steps to completion
# ** in percent on buttons
# . in percent visisted
# . in average visit
# *** in average per visited
# . in backtrack ratio
my_lm_2(as.numeric(game_data$worthwhile))
my_lm_2(as.numeric(game_data$fun))
fit <- aov(Spikes1 ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(Spikes2 ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(X20x20_.visited ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(X20x20_std_time_spent ~ + Clear_Progress + Clear_Completion,data = game_data) # * on Clear_Completion
summary(fit)
fit <- aov(X20x20_std_visits ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(X10x10_.visited ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(X10x10_std_time_spent ~ + Clear_Progress + Clear_Completion,data = game_data) # . on Clear_Completion
summary(fit)
fit <- aov(X10x10_std_visits ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(X5x5_.visited ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(X5x5_std_time_spent ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(X5x5_std_visits ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- aov(X2x2_.visited ~ + Clear_Progress + Clear_Completion,data = game_data) # . on Clear_Progress
summary(fit)
fit <- aov(X2x2_std_time_spent ~ + Clear_Progress + Clear_Completion,data = game_data) # ** on Clear_Completion
summary(fit)
fit <- aov(X2x2_std_visit ~ + Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Spikes1 ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Spikes2 ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(X20x20_.visited ~ Clear_Progress + Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Spikes1 ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
fit <- lm(Spikes2 ~ Clear_Progress * Clear_Completion,data = game_data)
summary(fit)
require("ggplot2")
require("dplyr")
require("plyr")
# Summarize data for use in plotting
data_summary <- function(data, varname, groupnames){
# Returns the mean and std. error of a column
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
se = sd(x[[col]]/sqrt(length(x)), na.rm=TRUE))
}
# Make a table of means and stderrs relative to ind. values
data_sum <-ddply(data, groupnames, .fun=summary_func,
varname)
print(data_sum)
return(data_sum)
}
# Make the plot
make_plot <- function(df, iv, dv) {
# Creat a supplementary table with means and standard errors
df2 <- data_summary(df, varname=dv, groupnames= c(iv))
the_mean <- df2[["mean"]]
print(the_mean)
se <- df2[["se"]]
# Plot with error bars
ggplot(df2,
aes_string(x = iv, y = the_mean)) +
ylab(dv) +
geom_bar(stat="identity",color="black", fill="#FF9999") +
geom_point(data=df, aes_string(x=iv,y=dv),position = position_jitter(w = 0.15, h = 0), alpha=.2) +
geom_errorbar(
aes(ymin = the_mean - 1.96*se, ymax = the_mean + 1.96*se),
width = .2)
}
make_plot(game_data, "Clear_Progress", "percent_on_buttons")
library(RColorBrewer)
cols<-brewer.pal(n=8,name="Set1")
cols_t1<-cols[game_data$Clear_Progress*2+game_data$Clear_Completion+1]
plot(game_data$percent_on_buttons,game_data[,30],col=cols_t1,pch=16)
pairs(game_data[,39:49])
plot(game_data$percent_on_buttons,as.numeric(game_data$confident),col=cols_t1,pch=16)
plot(game_data$percent_on_buttons,as.numeric(game_data$confident),col=cols_t1,pch=16)
plot(game_data$percent_on_buttons,as.numeric(game_data$remember),col=cols_t1,pch=16)
plot(game_data$percent_on_buttons,as.numeric(game_data$last),col=cols_t1,pch=16)
plot(game_data$percent_on_buttons,as.numeric(game_data$smooth),col=cols_t1,pch=16)
plot(game_data$Clear_Completion,as.numeric(game_data$gender),col=cols_t1,pch=16)
plot(game_data$average_per_visited,as.numeric(game_data$worthwhile),col=cols_t1,pch=16)
make_plot(game_data, "Clear_Progress", "percent_on_buttons")
#box plots...
boxplot(split(game_data$percent_on_buttons,game_data$Clear_Completion),main='Percent on Buttons by Clear Completion')
make_plot(game_data, "Clear_Progress", "percent_on_buttons")
pairs(game_data[,1:49])
pairs(game_data[,26:30,33:44])
pairs(game_data[,26:44])
